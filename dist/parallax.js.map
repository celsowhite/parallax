{"version":3,"file":"parallax.js","sources":["../src/parallax.js","../node_modules/@celsowhite/element-in-view/dist/element-in-view.es.js"],"sourcesContent":["/*----------------------\nImports\n----------------------*/\n\nimport elementInView from '@celsowhite/element-in-view';\n\n/*----------------------\nElement In View\n----------------------*/\n\nexport default function parallax(elementSelector) {\n\n    const parallaxItems = document.querySelectorAll(elementSelector);\n\n    const windowHeight = window.innerHeight;\n    \n    /*----------------------\n    Check Parallax Items\n    ---\n    On scroll check the position of an item and if in view then parallax it based on the speed and rotate settings\n    ----------------------*/\n\n    function checkParallaxItems() {\n\n        Array.from(parallaxItems).forEach(item => {\n\n            // If item is in view then parallax it at the given speed/rotation\n\n            if (elementInView(item, 'bottom')) {\n\n                // User configurations for speed and rotation\n\n                let speed = Number(item.dataset.speed);\n\n                let rotate = Number(item.dataset.rotate);\n\n                // Calculate the percentage the item has scrolled within the viewport\n                // If item was already in viewport then subtract its base so we have an origin for the scroll effects\n\n                let percentage = (windowHeight - item.getBoundingClientRect().top) / (windowHeight + item.clientHeight) - item.base;\n\n                // Adjust the vertical position by the speed factor while the item is in the viewport.\n                // Taking the negative of the speed that was entered so the element moves in the direction the user desired. (positive speed is a negative translate Y).\n\n                let position = -Math.round((speed * (percentage * 100)));\n\n                // Rotate a specific amount of degrees while the item is in the viewport\n\n                let degrees = Math.round((rotate / 100) * (percentage * 100));\n\n                // Check which data attributes the user has set so we apply the right style attributes.\n\n                if (rotate && speed) {\n                    item.style.transform = 'translate3d(0,' + position + 'px, 0) rotate(' + degrees + 'deg)';\n                } \n                else if (rotate) {\n                    item.style.transform = 'rotate(' + degrees + 'deg)';\n                } \n                else if (speed) {\n                    item.style.transform = 'translate3d(0,' + position + 'px, 0)';\n                }\n\n            }\n\n        });\n\n    }\n\n    /*----------------------\n    Init\n    ----------------------*/\n\n    if(parallaxItems.length) {\n\n        /*----------------------\n        Initial Position Check\n        ---\n        Check each item to see if it is in view on page load so we can set a base position\n        ----------------------*/\n\n        Array.from(parallaxItems).forEach(item => {\n\n            if (item.getBoundingClientRect().bottom < windowHeight) {\n                item.base = (-item.getBoundingClientRect().top + windowHeight) / (item.clientHeight + windowHeight);\n            } else {\n                item.base = 0;\n            }\n\n        });\n\n        /*----------------------\n        Scroll Event\n        ----------------------*/\n\n        window.addEventListener('scroll', function () {\n\n            // Ensure the browser repaints before running each animation\n\n            window.requestAnimationFrame(checkParallaxItems);\n\n        });\n\n    }\n\n}","export default function(t,e){void 0===e&&(e=\"top\");var o=window.innerHeight,i=t.getBoundingClientRect().top,n=t.offsetHeight,r=i+n/2,d=i+n;return!!((\"top\"===e.toLowerCase()?i:\"middle\"===e.toLowerCase()?r:\"bottom\"===e.toLowerCase()?d:i)<=o&&d>=0)}\n//# sourceMappingURL=element-in-view.es.js.map\n"],"names":["elementSelector","parallaxItems","document","querySelectorAll","windowHeight","window","innerHeight","checkParallaxItems","Array","from","forEach","item","t","e","o","i","getBoundingClientRect","top","n","offsetHeight","r","d","toLowerCase","elementInView","speed","Number","dataset","rotate","percentage","clientHeight","base","position","Math","round","degrees","style","transform","length","bottom","addEventListener","requestAnimationFrame"],"mappings":"eAUe,SAAkBA,OAEvBC,EAAgBC,SAASC,iBAAiBH,GAE1CI,EAAeC,OAAOC,qBAQnBC,IAELC,MAAMC,KAAKR,GAAeS,iBAAQC,MCxB3B,SAASC,EAAEC,QAAG,IAASA,IAAIA,EAAE,OAAO,IAAIC,EAAET,OAAOC,YAAYS,EAAEH,EAAEI,wBAAwBC,IAAIC,EAAEN,EAAEO,aAAaC,EAAEL,EAAEG,EAAE,EAAEG,EAAEN,EAAEG,EAAE,UAAU,QAAQL,EAAES,cAAcP,EAAE,WAAWF,EAAES,cAAcF,EAAE,WAAWP,EAAES,cAAcD,EAAEN,IAAID,GAAGO,GAAG,GD4BnOE,CAAcZ,EAAM,UAAW,KAI3Ba,EAAQC,OAAOd,EAAKe,QAAQF,OAE5BG,EAASF,OAAOd,EAAKe,QAAQC,QAK7BC,GAAcxB,EAAeO,EAAKK,wBAAwBC,MAAQb,EAAeO,EAAKkB,cAAgBlB,EAAKmB,KAK3GC,GAAYC,KAAKC,MAAOT,GAAsB,IAAbI,IAIjCM,EAAUF,KAAKC,MAAON,EAAS,KAAqB,IAAbC,IAIvCD,GAAUH,EACVb,EAAKwB,MAAMC,UAAY,iBAAmBL,EAAW,iBAAmBG,EAAU,OAE7EP,EACLhB,EAAKwB,MAAMC,UAAY,UAAYF,EAAU,OAExCV,IACLb,EAAKwB,MAAMC,UAAY,iBAAmBL,EAAW,aAalE9B,EAAcoC,SAQb7B,MAAMC,KAAKR,GAAeS,iBAAQC,GAG1BA,EAAKmB,KADLnB,EAAKK,wBAAwBsB,OAASlC,IACxBO,EAAKK,wBAAwBC,IAAMb,IAAiBO,EAAKkB,aAAezB,GAE1E,IASpBC,OAAOkC,iBAAiB,SAAU,WAI9BlC,OAAOmC,sBAAsBjC"}